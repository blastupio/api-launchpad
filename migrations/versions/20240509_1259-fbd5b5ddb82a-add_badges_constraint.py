"""add badges constraint

Revision ID: fbd5b5ddb82a
Revises: 21cd7c36589a
Create Date: 2024-05-09 12:59:40.066477

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fbd5b5ddb82a'
down_revision: Union[str, None] = '21cd7c36589a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('launchpad_project', 'badges',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::json"))
    op.execute(
        """
        CREATE OR REPLACE FUNCTION check_badges_type(record_id VARCHAR)
        RETURNS BOOLEAN AS $$
        DECLARE
            badge jsonb;
            badge_element jsonb;
        BEGIN
            SELECT badges INTO badge
            FROM launchpad_project
            WHERE id = record_id;

            IF badge IS NOT NULL AND badge <> '[]' THEN
                FOR badge_element IN SELECT * FROM jsonb_array_elements(badge)
                LOOP
                    IF badge_element->>'type' IS NOT NULL AND (badge_element->>'type' NOT IN ('PUBLIC', 'PRIVATE')) THEN
                        RAISE EXCEPTION 'Invalid badges value for record % : %', record_id, badge_element->>'type';
                    END IF;
                END LOOP;
            END IF;
            RETURN TRUE;
        END;
        $$ LANGUAGE plpgsql;
            """
        )
    op.execute("""
        CREATE OR REPLACE FUNCTION check_badges_trigger()
        RETURNS TRIGGER AS $$
        BEGIN
            -- Call function check_badges_launchpad for new or updated records
            IF TG_OP = 'INSERT' THEN
                PERFORM check_badges_type(NEW.id);
            ELSE
                PERFORM check_badges_type(OLD.id);
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;"""
   )

    op.execute("""
        -- Create trigger, which will call check_badges_trigger
        CREATE TRIGGER check_badges_type_trigger
        AFTER INSERT OR UPDATE ON launchpad_project
        FOR EACH ROW
        EXECUTE FUNCTION check_badges_trigger();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('launchpad_project', 'badges',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::json"))
    op.execute("DROP FUNCTION IF EXISTS check_badges_type(varchar);")
    op.execute("DROP FUNCTION IF EXISTS check_badges_trigger CASCADE;")
    op.execute("DROP TRIGGER IF EXISTS check_badges_type_trigger ON launchpad_project;")

    # ### end Alembic commands ###
